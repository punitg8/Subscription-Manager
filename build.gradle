plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.google.protobuf' version '0.9.1'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '19'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'checkstyle'
tasks.withType(Checkstyle) {
	showViolations true
	exclude '**/grpc/**'
	exclude '**/generated/**/*'
	exclude '**/proto/**'
	exclude '**/wsdl/**'
}
checkstyle {
	toolVersion '8.11'
	sourceSets = [project.sourceSets.main]
}
// Fails gradle build when checkstyle violation occurs
tasks.withType(Checkstyle).each { checkstyleTask ->
	checkstyleTask.doLast {
		reports.all { report ->
			def outputFile = report.destination
			if (outputFile.exists() && outputFile.text.contains("<error ")) {
				throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
			}
		}
	}
}

apply plugin: 'pmd'

pmd {
	consoleOutput=true
	toolVersion = '6.53.0'
	ruleSets = []
	ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//Lombok
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	//Validation
	implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
	implementation 'jakarta.el:jakarta.el-api:5.0.1'
	implementation 'org.hibernate:hibernate-validator-cdi:8.0.0.Final'
	implementation 'org.glassfish:jakarta.el:4.0.1'
	//Spring data jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//MYSQL
	runtimeOnly 'com.mysql:mysql-connector-j'
	//GRPC Compiler
	runtimeOnly 'io.grpc:grpc-netty-shaded:1.52.1'
	implementation 'io.grpc:grpc-protobuf:1.52.1'
	implementation 'io.grpc:grpc-stub:1.52.1'
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
	//GRPC
	implementation 'io.github.lognet:grpc-spring-boot-starter:5.0.0'
	//Google common proto
	implementation 'com.google.api.grpc:proto-google-common-protos:2.14.1'
	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-cache:3.0.2'
	//Kafka
	implementation 'org.springframework.kafka:spring-kafka:3.0.2'
	testImplementation 'org.springframework.kafka:spring-kafka-test:3.0.3'
	//Send Grid
	implementation 'com.sendgrid:sendgrid-java:4.9.3'
	//Mockito
	testImplementation 'org.mockito:mockito-inline:4.1.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.1.0'
	//H2 db
	testImplementation 'com.h2database:h2:2.1.214'
	// Grpc-Test-Support
	implementation 'net.devh:grpc-client-spring-boot-starter:2.14.0.RELEASE'
	compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.7"
	}
	generatedFilesBaseDir = "$projectDir/src/main/proto"
	clean {
		delete generatedFilesBaseDir
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.52.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
